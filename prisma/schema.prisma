datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String  @id @default(cuid())
  email    String? @unique
  username String? @unique
  sl_id    String? @unique
  provider String?

  //TODO:This should have default but removed for insertion
  createdAt DateTime?

  insertedAt DateTime         @default(now())
  imageUrl   String?
  verified   Boolean          @default(false)
  verifiedAt DateTime?
  fromCiv    Boolean          @default(false)
  videos     Video[]
  images     Image[]
  engagement UserEngagement[]
  reports    Report[]
  following  Follow[]         @relation("UserFollowing")
  followers  Follow[]         @relation("UserFollowers")

  UserBookmarks UserBookmarks[]
  UserPlays     UserPlays[]
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String // ID of the user who is following
  followingId String // ID of the user being followed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      Boolean  @default(true) // true for following, false for unfollowed

  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollowing", fields: [followingId], references: [id])

  @@unique([followerId, followingId], name: "followerId_followingId")
  @@index([followerId])
  @@index([followingId])
}

model Video {
  id          String   @id @default(cuid())
  videoId     String   @unique
  tags        Tag[] // Many-to-many relation
  publishedAt DateTime
  updatedAt   DateTime
  asset       Asset?
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String

  @@index([createdById])
}

model Tag {
  id     String  @id @default(cuid())
  name   String  @unique
  videos Video[]
}

model Asset {
  id        String @id @default(cuid())
  iframe    String
  player    String
  hls       String
  thumbnail String
  mp4       String
  videoId   String @unique
  video     Video  @relation(fields: [videoId], references: [id])
}

enum NSFWLevel {
  X
  Mature
  Soft
  None
  ADD
}

model Image {
  id         String     @id @default(cuid())
  remoteId   Int        @unique
  videoId    String     @unique
  url        String?
  hash       String?
  width      Int?
  height     Int?
  nsfwLevel  NSFWLevel?
  nsfw       Boolean?
  createdAt  DateTime?
  insertedAt DateTime   @default(now())
  postId     Int?
  username   String?
  user       User?      @relation(fields: [username], references: [username])

  // Fields from Stats
  laughCount   Int?
  likeCount    Int?
  heartCount   Int?
  commentCount Int?
  stats        Json // Stats as JSON string

  category Int?    @default(99)
  // Fields from Meta
  model    String?
  meta     Json // Meta as JSON string

  engagement UserEngagement[]
  reports    Report[]

  UserBookmarks UserBookmarks[]
  UserPlays     UserPlays[]
}

// Likes Table

//bookmarked   Boolean  @default(false)
//playCount    Int      @default(0)
//playDuration Int      @default(0)
model UserEngagement {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String
  imageId   String
  liked     Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  image     Image    @relation(fields: [imageId], references: [id])

  @@unique([userId, imageId], name: "userId_imageId")
  @@index([userId])
  @@index([imageId])
}

model UserBookmarks {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  userId     String
  imageId    String
  bookmarked Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id])
  image      Image    @relation(fields: [imageId], references: [id])

  @@unique([userId, imageId], name: "userId_imageId_bookmark")
  @@index([userId])
  @@index([imageId])
}

model UserPlays {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  userId         String
  imageId        String
  videoDuration  Float @default(0)
  totalWatchTime Float @default(0)
  videoLoops     Float @default(0)
  agent          Json? // User agent data in JSON format
  user           User     @relation(fields: [userId], references: [id])
  image          Image    @relation(fields: [imageId], references: [id])

  @@unique([userId, imageId], name: "userId_imageId_play")
  @@index([userId])
  @@index([imageId])
}

enum REPORTTYPE {
  videoMissing
  videoLag
  videoIncorrect
  thumbnailMissing
  thumbnailLag
  thumbnailIncorrect
  susContent
}

model Report {
  id      String     @id @default(cuid())
  type    REPORTTYPE // Integer representing the type of report (e.g., bad content, missing, etc.)
  imageId String // References the Image table
  userId  String? // Optional, references the User table

  // Relations
  image Image @relation(fields: [imageId], references: [id])
  user  User? @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([imageId])
  @@index([userId])
}
